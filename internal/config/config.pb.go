// Code generated by protoc-gen-go. DO NOT EDIT.
// source: config.proto

package roughtime_config

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ServersJSON represents a JSON format for distributing information about
// Roughtime servers.
type ServersJSON struct {
	// created contains the RFC3339 time when the JSON file was created.
	Created string `protobuf:"bytes,1,opt,name=created,proto3" json:"created,omitempty"`
	// expires contains the RFC3339 time when the information in this JSON file
	// expires.
	Expires              string    `protobuf:"bytes,2,opt,name=expires,proto3" json:"expires,omitempty"`
	Servers              []*Server `protobuf:"bytes,3,rep,name=servers,proto3" json:"servers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ServersJSON) Reset()         { *m = ServersJSON{} }
func (m *ServersJSON) String() string { return proto.CompactTextString(m) }
func (*ServersJSON) ProtoMessage()    {}
func (*ServersJSON) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{0}
}

func (m *ServersJSON) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServersJSON.Unmarshal(m, b)
}
func (m *ServersJSON) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServersJSON.Marshal(b, m, deterministic)
}
func (m *ServersJSON) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServersJSON.Merge(m, src)
}
func (m *ServersJSON) XXX_Size() int {
	return xxx_messageInfo_ServersJSON.Size(m)
}
func (m *ServersJSON) XXX_DiscardUnknown() {
	xxx_messageInfo_ServersJSON.DiscardUnknown(m)
}

var xxx_messageInfo_ServersJSON proto.InternalMessageInfo

func (m *ServersJSON) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *ServersJSON) GetExpires() string {
	if m != nil {
		return m.Expires
	}
	return ""
}

func (m *ServersJSON) GetServers() []*Server {
	if m != nil {
		return m.Servers
	}
	return nil
}

// Server represents a Roughtime server in a JSON configuration.
type Server struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// public_key_type specifies the type of the public key contained in
	// |PublicKey|. Normally this will be "ed25519" but implementations should
	// ignore entries with unknown key types.
	PublicKeyType        string           `protobuf:"bytes,2,opt,name=public_key_type,json=publicKeyType,proto3" json:"public_key_type,omitempty"`
	PublicKey            []byte           `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Addresses            []*ServerAddress `protobuf:"bytes,4,rep,name=addresses,proto3" json:"addresses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Server) Reset()         { *m = Server{} }
func (m *Server) String() string { return proto.CompactTextString(m) }
func (*Server) ProtoMessage()    {}
func (*Server) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{1}
}

func (m *Server) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Server.Unmarshal(m, b)
}
func (m *Server) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Server.Marshal(b, m, deterministic)
}
func (m *Server) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Server.Merge(m, src)
}
func (m *Server) XXX_Size() int {
	return xxx_messageInfo_Server.Size(m)
}
func (m *Server) XXX_DiscardUnknown() {
	xxx_messageInfo_Server.DiscardUnknown(m)
}

var xxx_messageInfo_Server proto.InternalMessageInfo

func (m *Server) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Server) GetPublicKeyType() string {
	if m != nil {
		return m.PublicKeyType
	}
	return ""
}

func (m *Server) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *Server) GetAddresses() []*ServerAddress {
	if m != nil {
		return m.Addresses
	}
	return nil
}

// ServerAddress represents the address of a Roughtime server in a JSON
// configuration.
type ServerAddress struct {
	Protocol string `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// address contains a protocol specific address. For the protocol "udp", the
	// address has the form "host:port" where host is either a DNS name, an IPv4
	// literal, or an IPv6 literal in square brackets.
	Address              string   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServerAddress) Reset()         { *m = ServerAddress{} }
func (m *ServerAddress) String() string { return proto.CompactTextString(m) }
func (*ServerAddress) ProtoMessage()    {}
func (*ServerAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{2}
}

func (m *ServerAddress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerAddress.Unmarshal(m, b)
}
func (m *ServerAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerAddress.Marshal(b, m, deterministic)
}
func (m *ServerAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerAddress.Merge(m, src)
}
func (m *ServerAddress) XXX_Size() int {
	return xxx_messageInfo_ServerAddress.Size(m)
}
func (m *ServerAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerAddress.DiscardUnknown(m)
}

var xxx_messageInfo_ServerAddress proto.InternalMessageInfo

func (m *ServerAddress) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *ServerAddress) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// Chain represents a history of Roughtime queries where each provably follows
// the previous one.
type Chain struct {
	Links                []*Link  `protobuf:"bytes,1,rep,name=links,proto3" json:"links,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Chain) Reset()         { *m = Chain{} }
func (m *Chain) String() string { return proto.CompactTextString(m) }
func (*Chain) ProtoMessage()    {}
func (*Chain) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{3}
}

func (m *Chain) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Chain.Unmarshal(m, b)
}
func (m *Chain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Chain.Marshal(b, m, deterministic)
}
func (m *Chain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chain.Merge(m, src)
}
func (m *Chain) XXX_Size() int {
	return xxx_messageInfo_Chain.Size(m)
}
func (m *Chain) XXX_DiscardUnknown() {
	xxx_messageInfo_Chain.DiscardUnknown(m)
}

var xxx_messageInfo_Chain proto.InternalMessageInfo

func (m *Chain) GetLinks() []*Link {
	if m != nil {
		return m.Links
	}
	return nil
}

// Link represents an entry in a Chain.
type Link struct {
	// public_key_type specifies the type of public key contained in
	// |PublicKey|. See the same field in |Server| for details.
	PublicKeyType   string `protobuf:"bytes,1,opt,name=public_key_type,json=publicKeyType,proto3" json:"public_key_type,omitempty"`
	ServerPublicKey []byte `protobuf:"bytes,2,opt,name=server_public_key,json=serverPublicKey,proto3" json:"server_public_key,omitempty"`
	// nonce_or_blind contains either the full nonce (only for the first |Link|
	// in a |Chain|) or else contains a blind value that is combined with the
	// previous reply to make the next nonce. In either case, the value is 64
	// bytes long.
	NonceOrBlind []byte `protobuf:"bytes,3,opt,name=nonce_or_blind,json=nonceOrBlind,proto3" json:"nonce_or_blind,omitempty"`
	// reply contains the reply from the server.
	Reply                []byte   `protobuf:"bytes,4,opt,name=reply,proto3" json:"reply,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Link) Reset()         { *m = Link{} }
func (m *Link) String() string { return proto.CompactTextString(m) }
func (*Link) ProtoMessage()    {}
func (*Link) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{4}
}

func (m *Link) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Link.Unmarshal(m, b)
}
func (m *Link) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Link.Marshal(b, m, deterministic)
}
func (m *Link) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Link.Merge(m, src)
}
func (m *Link) XXX_Size() int {
	return xxx_messageInfo_Link.Size(m)
}
func (m *Link) XXX_DiscardUnknown() {
	xxx_messageInfo_Link.DiscardUnknown(m)
}

var xxx_messageInfo_Link proto.InternalMessageInfo

func (m *Link) GetPublicKeyType() string {
	if m != nil {
		return m.PublicKeyType
	}
	return ""
}

func (m *Link) GetServerPublicKey() []byte {
	if m != nil {
		return m.ServerPublicKey
	}
	return nil
}

func (m *Link) GetNonceOrBlind() []byte {
	if m != nil {
		return m.NonceOrBlind
	}
	return nil
}

func (m *Link) GetReply() []byte {
	if m != nil {
		return m.Reply
	}
	return nil
}

func init() {
	proto.RegisterType((*ServersJSON)(nil), "roughtime.config.ServersJSON")
	proto.RegisterType((*Server)(nil), "roughtime.config.Server")
	proto.RegisterType((*ServerAddress)(nil), "roughtime.config.ServerAddress")
	proto.RegisterType((*Chain)(nil), "roughtime.config.Chain")
	proto.RegisterType((*Link)(nil), "roughtime.config.Link")
}

func init() { proto.RegisterFile("config.proto", fileDescriptor_3eaf2c85e69e9ea4) }

var fileDescriptor_3eaf2c85e69e9ea4 = []byte{
	// 345 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xdd, 0x4e, 0xe2, 0x40,
	0x14, 0xc7, 0xd3, 0x52, 0x60, 0x39, 0xc0, 0xb2, 0x3b, 0xd9, 0x6c, 0x26, 0x26, 0x46, 0xd2, 0x18,
	0x43, 0x8c, 0xe9, 0x05, 0xc6, 0x4b, 0x2f, 0xc4, 0x98, 0x18, 0x35, 0x62, 0x8a, 0xf7, 0x4d, 0x69,
	0x8f, 0x30, 0xa1, 0xcc, 0x34, 0x33, 0xc5, 0xd8, 0x17, 0xf1, 0x01, 0x7c, 0x52, 0xd3, 0x99, 0x01,
	0xfc, 0xc0, 0x3b, 0xfe, 0x1f, 0xc3, 0xf9, 0xf7, 0x07, 0x9d, 0x44, 0xf0, 0x27, 0x36, 0x0b, 0x72,
	0x29, 0x0a, 0x41, 0xfe, 0x48, 0xb1, 0x9a, 0xcd, 0x0b, 0xb6, 0xc4, 0xc0, 0xf8, 0xfe, 0x0a, 0xda,
	0x13, 0x94, 0xcf, 0x28, 0xd5, 0xcd, 0x64, 0x7c, 0x4f, 0x28, 0x34, 0x13, 0x89, 0x71, 0x81, 0x29,
	0x75, 0xfa, 0xce, 0xa0, 0x15, 0xae, 0x65, 0x95, 0xe0, 0x4b, 0xce, 0x24, 0x2a, 0xea, 0x9a, 0xc4,
	0x4a, 0x32, 0x84, 0xa6, 0x32, 0x7f, 0x41, 0x6b, 0xfd, 0xda, 0xa0, 0x3d, 0xa4, 0xc1, 0xd7, 0x33,
	0x81, 0xb9, 0x11, 0xae, 0x8b, 0xfe, 0x9b, 0x03, 0x0d, 0xe3, 0x11, 0x02, 0x1e, 0x8f, 0x97, 0x68,
	0xef, 0xe9, 0xdf, 0xe4, 0x08, 0x7a, 0xf9, 0x6a, 0x9a, 0xb1, 0x24, 0x5a, 0x60, 0x19, 0x15, 0x65,
	0x8e, 0xf6, 0x68, 0xd7, 0xd8, 0xb7, 0x58, 0x3e, 0x96, 0x39, 0x92, 0x7d, 0x80, 0x6d, 0x8f, 0xd6,
	0xfa, 0xce, 0xa0, 0x13, 0xb6, 0x36, 0x15, 0x72, 0x0e, 0xad, 0x38, 0x4d, 0x25, 0x2a, 0x85, 0x8a,
	0x7a, 0x7a, 0xdb, 0xc1, 0x4f, 0xdb, 0x2e, 0x4c, 0x31, 0xdc, 0xbe, 0xf0, 0xaf, 0xa0, 0xfb, 0x29,
	0x23, 0x7b, 0xf0, 0x4b, 0x73, 0x4c, 0x44, 0x66, 0xe7, 0x6e, 0x74, 0xc5, 0xc7, 0xbe, 0x5c, 0xf3,
	0xb1, 0xd2, 0x3f, 0x83, 0xfa, 0xe5, 0x3c, 0x66, 0x9c, 0x9c, 0x40, 0x3d, 0x63, 0x7c, 0xa1, 0xa8,
	0xa3, 0xa7, 0xfc, 0xff, 0x3e, 0xe5, 0x8e, 0xf1, 0x45, 0x68, 0x4a, 0xfe, 0xab, 0x03, 0x5e, 0xa5,
	0x77, 0xc1, 0x70, 0x76, 0xc1, 0x38, 0x86, 0xbf, 0x06, 0x6f, 0xf4, 0x81, 0x89, 0xab, 0x99, 0xf4,
	0x4c, 0xf0, 0xb0, 0x21, 0x73, 0x08, 0xbf, 0xb9, 0xe0, 0x09, 0x46, 0x42, 0x46, 0xd3, 0x8c, 0xf1,
	0xd4, 0xc2, 0xeb, 0x68, 0x77, 0x2c, 0x47, 0x95, 0x47, 0xfe, 0x41, 0x5d, 0x62, 0x9e, 0x95, 0xd4,
	0xd3, 0xa1, 0x11, 0x23, 0xf7, 0xda, 0x9d, 0x36, 0xf4, 0x77, 0x9f, 0xbe, 0x07, 0x00, 0x00, 0xff,
	0xff, 0x21, 0x91, 0xde, 0x7e, 0x5f, 0x02, 0x00, 0x00,
}
